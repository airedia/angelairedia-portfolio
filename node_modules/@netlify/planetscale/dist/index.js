var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { connect } from "@planetscale/database";
import nodeFetch from "node-fetch";
if (!process.env.PLANETSCALE_HOST || !process.env.PLANETSCALE_PASSWORD || !process.env.PLANETSCALE_USERNAME) {
    console.error("Missing PlanetScale credentials. Make sure Netlify Planetscale integration is enabled.");
}
const connection = connect({
    host: process.env.PLANETSCALE_HOST,
    password: process.env.PLANETSCALE_PASSWORD,
    username: process.env.PLANETSCALE_USERNAME,
    fetch: typeof fetch === "undefined" ? nodeFetch : fetch,
});
export default connection;
// Deprecated
export const withPlanetscale = (handler) => {
    return (event, context) => __awaiter(void 0, void 0, void 0, function* () {
        return handler(event, Object.assign(Object.assign({}, context), { planetscale: { connection } }));
    });
};
