import { HandlerContext, HandlerEvent, HandlerResponse } from '@netlify/functions';
declare type FunctionHandler<Context = unknown> = (event: HandlerEvent, context: HandlerContext & Context) => Promise<HandlerResponse>;
export declare type IntegrationHandler<Context = unknown> = (handler: FunctionHandler<Context>) => FunctionHandler;
declare type ExtractContextTypes<HandlerTypes extends unknown[]> = HandlerTypes extends [infer Handler, ...infer Remaining] ? Handler extends IntegrationHandler<infer ContextType> ? ContextType & ExtractContextTypes<Remaining> : unknown : unknown;
export declare const wrap: <T extends IntegrationHandler<unknown>[]>(...handlers: T) => (functionHandler: (event: HandlerEvent, context: HandlerContext & ExtractContextTypes<T>) => Promise<HandlerResponse>) => (event: HandlerEvent, context: HandlerContext & ExtractContextTypes<T>) => Promise<HandlerResponse>;
export {};
